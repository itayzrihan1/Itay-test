pipeline {
    agent any 
      stages {
        stage('checkout') { 
            steps {
	git 'https://github.com/itayzrihan1/Itay-test' 
            }
        }
        stage('run app') { 
            steps {
	 
	bat 'python rest_app.py'
                    
            }
        }
        stage('backend test') { 
            steps {
                  
	bat 'python backend_testing.py' 
                                  
            }
        }
        stage('clear') { 
            steps {
	   
	bat 'python clean_environemnt.py'  
                     
            }
        }

           environment {
           registry = "itayzrihan/itay-test" 
           registryCredential = 'docker-hub' 
           dockerImage = itay-test
          }
           stage('build and push image') {
              steps {
                   script {

                           dockerImage = project ":${BUILD_NUMBER}" 
                           docker.withRegistry('', registryCredential) {
                           dockerImage.push() 
                         }
                     }
                }
            }
        
        stage('make env file') { 
            steps {

                     bat "echo IMAGE_TAG=${BUILD_NUMBER} > .env"
                  post {
                  always {

                          bat "docker rmi $registry:${BUILD_NUMBER}"
            }
        }
        stage('start local cluster') { 
            steps {
	   
            bat 'minikube start'
                     
            }
        }

        stage('apply k8s') { 
            steps {
	   
            bat 'kubectl apply -f https://raw.githubusercontent.com/itayzrihan1/Itay-test/main/deployment.yaml?token=ASSTMJ6FBT6E6P2F6TQZ22TAPNC3G'
                     
            }
        }

        stage('apply cronjob') { 
            steps {
	   
            bat 'kubectl apply -f https://raw.githubusercontent.com/itayzrihan1/Itay-test/main/CronJob.yaml?token=ASSTMJ7USIHZQKAJYXX5A63APNDIM'
                     
            }
        }                      
        options {
              buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '20'))
              properties([pipelineTriggers([pollSCM('*/30 * * * *')])])
            }
        }	
     }
   }         
}